{"abi":[{"type":"function","name":"addIdentityToStorage","inputs":[{"name":"_userAddress","type":"address","internalType":"address"},{"name":"_identity","type":"address","internalType":"contract LegacyIIdentity"},{"name":"_country","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"bindIdentityRegistry","inputs":[{"name":"_identityRegistry","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"linkedIdentityRegistries","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"modifyStoredIdentity","inputs":[{"name":"_userAddress","type":"address","internalType":"address"},{"name":"_identity","type":"address","internalType":"contract LegacyIIdentity"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"modifyStoredInvestorCountry","inputs":[{"name":"_userAddress","type":"address","internalType":"address"},{"name":"_country","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"removeIdentityFromStorage","inputs":[{"name":"_userAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"storedIdentity","inputs":[{"name":"_userAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"contract LegacyIIdentity"}],"stateMutability":"view"},{"type":"function","name":"storedInvestorCountry","inputs":[{"name":"_userAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"transferOwnershipOnIdentityRegistryStorage","inputs":[{"name":"_newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unbindIdentityRegistry","inputs":[{"name":"_identityRegistry","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"CountryModified","inputs":[{"name":"investorAddress","type":"address","indexed":true,"internalType":"address"},{"name":"country","type":"uint16","indexed":true,"internalType":"uint16"}],"anonymous":false},{"type":"event","name":"IdentityModified","inputs":[{"name":"oldIdentity","type":"address","indexed":true,"internalType":"contract LegacyIIdentity"},{"name":"newIdentity","type":"address","indexed":true,"internalType":"contract LegacyIIdentity"}],"anonymous":false},{"type":"event","name":"IdentityRegistryBound","inputs":[{"name":"identityRegistry","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"IdentityRegistryUnbound","inputs":[{"name":"identityRegistry","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"IdentityStored","inputs":[{"name":"investorAddress","type":"address","indexed":true,"internalType":"address"},{"name":"identity","type":"address","indexed":true,"internalType":"contract LegacyIIdentity"}],"anonymous":false},{"type":"event","name":"IdentityUnstored","inputs":[{"name":"investorAddress","type":"address","indexed":true,"internalType":"address"},{"name":"identity","type":"address","indexed":true,"internalType":"contract LegacyIIdentity"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addIdentityToStorage(address,address,uint16)":"a53410dd","bindIdentityRegistry(address)":"690a49f9","linkedIdentityRegistries()":"bf9eb959","modifyStoredIdentity(address,address)":"e805cf86","modifyStoredInvestorCountry(address,uint16)":"9f3418d5","removeIdentityFromStorage(address)":"cf191bcd","storedIdentity(address)":"7988d3a5","storedInvestorCountry(address)":"727e13bc","transferOwnershipOnIdentityRegistryStorage(address)":"5ccbbe49","unbindIdentityRegistry(address)":"97a012f7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"CountryModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract LegacyIIdentity\",\"name\":\"oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract LegacyIIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryUnbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract LegacyIIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract LegacyIIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityUnstored\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract LegacyIIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"addIdentityToStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"bindIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkedIdentityRegistries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract LegacyIIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"modifyStoredIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"modifyStoredInvestorCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"removeIdentityFromStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"storedIdentity\",\"outputs\":[{\"internalType\":\"contract LegacyIIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"storedInvestorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOnIdentityRegistryStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"unbindIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addIdentityToStorage(address,address,uint16)\":{\"details\":\"adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_country\":\"The country of the investor  emits `IdentityStored` event\",\"_identity\":\"The address of the user's identity contract\",\"_userAddress\":\"The address of the user\"}},\"bindIdentityRegistry(address)\":{\"params\":{\"_identityRegistry\":\"The identity registry address to add.\"}},\"linkedIdentityRegistries()\":{\"details\":\"Returns the identity registries linked to the storage contract\"},\"modifyStoredIdentity(address,address)\":{\"details\":\"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_identity\":\"The address of the user's new identity contract  emits `IdentityModified` event\",\"_userAddress\":\"The address of the user\"}},\"modifyStoredInvestorCountry(address,uint16)\":{\"details\":\"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_country\":\"The new country of the user  emits `CountryModified` event\",\"_userAddress\":\"The address of the user\"}},\"removeIdentityFromStorage(address)\":{\"details\":\"Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_userAddress\":\"The address of the user to be removed  emits `IdentityUnstored` event\"}},\"storedIdentity(address)\":{\"details\":\"Returns the onchainID of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"storedInvestorCountry(address)\":{\"details\":\"Returns the country code of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"transferOwnershipOnIdentityRegistryStorage(address)\":{\"params\":{\"_newOwner\":\"The new owner of this contract.\"}},\"unbindIdentityRegistry(address)\":{\"params\":{\"_identityRegistry\":\"The identity registry address to remove.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CountryModified(address,uint16)\":{\"notice\":\"this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country\"},\"IdentityModified(address,address)\":{\"notice\":\"this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's\"},\"IdentityRegistryBound(address)\":{\"notice\":\"this event is emitted when an Identity Registry is bound to the storage contract  the event is emitted by the 'addIdentityRegistry' function  `identityRegistry` is the address of the identity registry added\"},\"IdentityRegistryUnbound(address)\":{\"notice\":\"this event is emitted when an Identity Registry is unbound from the storage contract  the event is emitted by the 'removeIdentityRegistry' function  `identityRegistry` is the address of the identity registry removed\"},\"IdentityStored(address,address)\":{\"notice\":\"this event is emitted when an Identity is registered into the storage contract.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityUnstored(address,address)\":{\"notice\":\"this event is emitted when an Identity is removed from the storage contract.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"}},\"kind\":\"user\",\"methods\":{\"bindIdentityRegistry(address)\":{\"notice\":\"Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract\"},\"transferOwnershipOnIdentityRegistryStorage(address)\":{\"notice\":\"Transfers the Ownership of the Identity Registry Storage to a new Owner.  This function can only be called by the wallet set as owner of the smart contract\"},\"unbindIdentityRegistry(address)\":{\"notice\":\"Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract\"}},\"notice\":\"NOTICE     The T-REX software is licensed under a proprietary license or the GPL v.3.     If you choose to receive it under the GPL v.3 license, the following applies:     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain     Copyright (C) 2021, Tokeny s\\u00e0rl.     This program is free software: you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation, either version 3 of the License, or     (at your option) any later version.     This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.     You should have received a copy of the GNU General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc3643/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol\":\"IIdentityRegistryStorageLegacy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@pythnetwork/=node_modules/@pythnetwork/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/erc3643/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol\":{\"keccak256\":\"0x805abfc1898863c3f27e9f51cddc4543d5a2cf011c5d86418bd7f98181c0ae0d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://403910603e38469585680a18d8c1a33c9ab07541ead5ae5a0fc35bdf550aeb6a\",\"dweb:/ipfs/QmUyh5C1EFGYY83WCk4BnxK11cZEdiKFt58Ubm9NkYbrv3\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"investorAddress","type":"address","indexed":true},{"internalType":"uint16","name":"country","type":"uint16","indexed":true}],"type":"event","name":"CountryModified","anonymous":false},{"inputs":[{"internalType":"contract LegacyIIdentity","name":"oldIdentity","type":"address","indexed":true},{"internalType":"contract LegacyIIdentity","name":"newIdentity","type":"address","indexed":true}],"type":"event","name":"IdentityModified","anonymous":false},{"inputs":[{"internalType":"address","name":"identityRegistry","type":"address","indexed":true}],"type":"event","name":"IdentityRegistryBound","anonymous":false},{"inputs":[{"internalType":"address","name":"identityRegistry","type":"address","indexed":true}],"type":"event","name":"IdentityRegistryUnbound","anonymous":false},{"inputs":[{"internalType":"address","name":"investorAddress","type":"address","indexed":true},{"internalType":"contract LegacyIIdentity","name":"identity","type":"address","indexed":true}],"type":"event","name":"IdentityStored","anonymous":false},{"inputs":[{"internalType":"address","name":"investorAddress","type":"address","indexed":true},{"internalType":"contract LegacyIIdentity","name":"identity","type":"address","indexed":true}],"type":"event","name":"IdentityUnstored","anonymous":false},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"contract LegacyIIdentity","name":"_identity","type":"address"},{"internalType":"uint16","name":"_country","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"addIdentityToStorage"},{"inputs":[{"internalType":"address","name":"_identityRegistry","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"bindIdentityRegistry"},{"inputs":[],"stateMutability":"view","type":"function","name":"linkedIdentityRegistries","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"contract LegacyIIdentity","name":"_identity","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"modifyStoredIdentity"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"uint16","name":"_country","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"modifyStoredInvestorCountry"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"removeIdentityFromStorage"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"stateMutability":"view","type":"function","name":"storedIdentity","outputs":[{"internalType":"contract LegacyIIdentity","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"stateMutability":"view","type":"function","name":"storedInvestorCountry","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnershipOnIdentityRegistryStorage"},{"inputs":[{"internalType":"address","name":"_identityRegistry","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"unbindIdentityRegistry"}],"devdoc":{"kind":"dev","methods":{"addIdentityToStorage(address,address,uint16)":{"details":"adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract","params":{"_country":"The country of the investor  emits `IdentityStored` event","_identity":"The address of the user's identity contract","_userAddress":"The address of the user"}},"bindIdentityRegistry(address)":{"params":{"_identityRegistry":"The identity registry address to add."}},"linkedIdentityRegistries()":{"details":"Returns the identity registries linked to the storage contract"},"modifyStoredIdentity(address,address)":{"details":"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract","params":{"_identity":"The address of the user's new identity contract  emits `IdentityModified` event","_userAddress":"The address of the user"}},"modifyStoredInvestorCountry(address,uint16)":{"details":"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract","params":{"_country":"The new country of the user  emits `CountryModified` event","_userAddress":"The address of the user"}},"removeIdentityFromStorage(address)":{"details":"Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract","params":{"_userAddress":"The address of the user to be removed  emits `IdentityUnstored` event"}},"storedIdentity(address)":{"details":"Returns the onchainID of an investor.","params":{"_userAddress":"The wallet of the investor"}},"storedInvestorCountry(address)":{"details":"Returns the country code of an investor.","params":{"_userAddress":"The wallet of the investor"}},"transferOwnershipOnIdentityRegistryStorage(address)":{"params":{"_newOwner":"The new owner of this contract."}},"unbindIdentityRegistry(address)":{"params":{"_identityRegistry":"The identity registry address to remove."}}},"version":1},"userdoc":{"kind":"user","methods":{"bindIdentityRegistry(address)":{"notice":"Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract"},"transferOwnershipOnIdentityRegistryStorage(address)":{"notice":"Transfers the Ownership of the Identity Registry Storage to a new Owner.  This function can only be called by the wallet set as owner of the smart contract"},"unbindIdentityRegistry(address)":{"notice":"Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract"}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","@pythnetwork/=node_modules/@pythnetwork/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/erc3643/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol":"IIdentityRegistryStorageLegacy"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/erc3643/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol":{"keccak256":"0x805abfc1898863c3f27e9f51cddc4543d5a2cf011c5d86418bd7f98181c0ae0d","urls":["bzz-raw://403910603e38469585680a18d8c1a33c9ab07541ead5ae5a0fc35bdf550aeb6a","dweb:/ipfs/QmUyh5C1EFGYY83WCk4BnxK11cZEdiKFt58Ubm9NkYbrv3"],"license":"GPL-3.0"}},"version":1},"id":23}