{"abi":[],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc3643/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol\":\"InitializableLegacy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@pythnetwork/=node_modules/@pythnetwork/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/erc3643/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol\":{\"keccak256\":\"0x805abfc1898863c3f27e9f51cddc4543d5a2cf011c5d86418bd7f98181c0ae0d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://403910603e38469585680a18d8c1a33c9ab07541ead5ae5a0fc35bdf550aeb6a\",\"dweb:/ipfs/QmUyh5C1EFGYY83WCk4BnxK11cZEdiKFt58Ubm9NkYbrv3\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","@pythnetwork/=node_modules/@pythnetwork/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/erc3643/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol":"InitializableLegacy"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/erc3643/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol":{"keccak256":"0x805abfc1898863c3f27e9f51cddc4543d5a2cf011c5d86418bd7f98181c0ae0d","urls":["bzz-raw://403910603e38469585680a18d8c1a33c9ab07541ead5ae5a0fc35bdf550aeb6a","dweb:/ipfs/QmUyh5C1EFGYY83WCk4BnxK11cZEdiKFt58Ubm9NkYbrv3"],"license":"GPL-3.0"}},"version":1},"id":23}