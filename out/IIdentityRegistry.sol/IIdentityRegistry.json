{"abi":[{"type":"function","name":"batchRegisterIdentity","inputs":[{"name":"_userAddresses","type":"address[]","internalType":"address[]"},{"name":"_identities","type":"address[]","internalType":"contract IIdentity[]"},{"name":"_countries","type":"uint16[]","internalType":"uint16[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"contains","inputs":[{"name":"_userAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"deleteIdentity","inputs":[{"name":"_userAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"identity","inputs":[{"name":"_userAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"contract IIdentity"}],"stateMutability":"view"},{"type":"function","name":"identityStorage","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IIdentityRegistryStorage"}],"stateMutability":"view"},{"type":"function","name":"investorCountry","inputs":[{"name":"_userAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"isVerified","inputs":[{"name":"_userAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"issuersRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ITrustedIssuersRegistry"}],"stateMutability":"view"},{"type":"function","name":"registerIdentity","inputs":[{"name":"_userAddress","type":"address","internalType":"address"},{"name":"_identity","type":"address","internalType":"contract IIdentity"},{"name":"_country","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setClaimTopicsRegistry","inputs":[{"name":"_claimTopicsRegistry","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setIdentityRegistryStorage","inputs":[{"name":"_identityRegistryStorage","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setTrustedIssuersRegistry","inputs":[{"name":"_trustedIssuersRegistry","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"topicsRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IClaimTopicsRegistry"}],"stateMutability":"view"},{"type":"function","name":"updateCountry","inputs":[{"name":"_userAddress","type":"address","internalType":"address"},{"name":"_country","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateIdentity","inputs":[{"name":"_userAddress","type":"address","internalType":"address"},{"name":"_identity","type":"address","internalType":"contract IIdentity"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ClaimTopicsRegistrySet","inputs":[{"name":"claimTopicsRegistry","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"CountryUpdated","inputs":[{"name":"investorAddress","type":"address","indexed":true,"internalType":"address"},{"name":"country","type":"uint16","indexed":true,"internalType":"uint16"}],"anonymous":false},{"type":"event","name":"IdentityRegistered","inputs":[{"name":"investorAddress","type":"address","indexed":true,"internalType":"address"},{"name":"identity","type":"address","indexed":true,"internalType":"contract IIdentity"}],"anonymous":false},{"type":"event","name":"IdentityRemoved","inputs":[{"name":"investorAddress","type":"address","indexed":true,"internalType":"address"},{"name":"identity","type":"address","indexed":true,"internalType":"contract IIdentity"}],"anonymous":false},{"type":"event","name":"IdentityStorageSet","inputs":[{"name":"identityStorage","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"IdentityUpdated","inputs":[{"name":"oldIdentity","type":"address","indexed":true,"internalType":"contract IIdentity"},{"name":"newIdentity","type":"address","indexed":true,"internalType":"contract IIdentity"}],"anonymous":false},{"type":"event","name":"TrustedIssuersRegistrySet","inputs":[{"name":"trustedIssuersRegistry","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"batchRegisterIdentity(address[],address[],uint16[])":"653dc9f1","contains(address)":"5dbe47e8","deleteIdentity(address)":"a8d29d1d","identity(address)":"f0eb5e54","identityStorage()":"f11abfd8","investorCountry(address)":"7e42683b","isVerified(address)":"b9209e33","issuersRegistry()":"b4f3fcb7","registerIdentity(address,address,uint16)":"454a03e0","setClaimTopicsRegistry(address)":"670af6a9","setIdentityRegistryStorage(address)":"26d941ae","setTrustedIssuersRegistry(address)":"e744d789","topicsRegistry()":"3b3e12f4","updateCountry(address,uint16)":"3b239a7f","updateIdentity(address,address)":"8e098ca1"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"ClaimTopicsRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"CountryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityStorage\",\"type\":\"address\"}],\"name\":\"IdentityStorageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trustedIssuersRegistry\",\"type\":\"address\"}],\"name\":\"TrustedIssuersRegistrySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IIdentity[]\",\"name\":\"_identities\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"}],\"name\":\"batchRegisterIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"deleteIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"investorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuersRegistry\",\"outputs\":[{\"internalType\":\"contract ITrustedIssuersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"setClaimTopicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistryStorage\",\"type\":\"address\"}],\"name\":\"setIdentityRegistryStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedIssuersRegistry\",\"type\":\"address\"}],\"name\":\"setTrustedIssuersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topicsRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"updateCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"updateIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchRegisterIdentity(address[],address[],uint16[])\":{\"details\":\"function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_countries\":\"The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events\",\"_identities\":\"The addresses of the corresponding identity contracts\",\"_userAddresses\":\"The addresses of the users\"}},\"contains(address)\":{\"details\":\"This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.\",\"params\":{\"_userAddress\":\"The address of the user to be checked.\"},\"returns\":{\"_0\":\"'True' if the address is contained in the Identity Registry, 'false' if not.\"}},\"deleteIdentity(address)\":{\"details\":\"Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_userAddress\":\"The address of the user to be removed  emits `IdentityRemoved` event\"}},\"identity(address)\":{\"details\":\"Returns the onchainID of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"identityStorage()\":{\"details\":\"Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\"},\"investorCountry(address)\":{\"details\":\"Returns the country code of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"isVerified(address)\":{\"details\":\"This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from trusted issuers registry and from the claim topics registry\",\"params\":{\"_userAddress\":\"The address of the user to be verified.\"},\"returns\":{\"_0\":\"'True' if the address is verified, 'false' if not.\"}},\"issuersRegistry()\":{\"details\":\"Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\"},\"registerIdentity(address,address,uint16)\":{\"details\":\"Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_country\":\"The country of the investor  emits `IdentityRegistered` event\",\"_identity\":\"The address of the user's identity contract\",\"_userAddress\":\"The address of the user\"}},\"setClaimTopicsRegistry(address)\":{\"details\":\"Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_claimTopicsRegistry\":\"The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event\"}},\"setIdentityRegistryStorage(address)\":{\"details\":\"Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_identityRegistryStorage\":\"The address of the new Identity Registry Storage  emits `IdentityStorageSet` event\"}},\"setTrustedIssuersRegistry(address)\":{\"details\":\"Replace the actual trustedIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_trustedIssuersRegistry\":\"The address of the new Trusted Issuers Registry  emits `TrustedIssuersRegistrySet` event\"}},\"topicsRegistry()\":{\"details\":\"Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\"},\"updateCountry(address,uint16)\":{\"details\":\"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_country\":\"The new country of the user  emits `CountryUpdated` event\",\"_userAddress\":\"The address of the user\"}},\"updateIdentity(address,address)\":{\"details\":\"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_identity\":\"The address of the user's new identity contract  emits `IdentityUpdated` event\",\"_userAddress\":\"The address of the user\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimTopicsRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\"},\"CountryUpdated(address,uint16)\":{\"notice\":\"this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country\"},\"IdentityRegistered(address,address)\":{\"notice\":\"this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityRemoved(address,address)\":{\"notice\":\"this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityStorageSet(address)\":{\"notice\":\"this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract\"},\"IdentityUpdated(address,address)\":{\"notice\":\"this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's\"},\"TrustedIssuersRegistrySet(address)\":{\"notice\":\"this event is emitted when the TrustedIssuersRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc3643/registry/interface/IIdentityRegistry.sol\":\"IIdentityRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@pythnetwork/=node_modules/@pythnetwork/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/erc3643/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0xc34dc3406974c37153a0bd2eaea0f75feac7bdfbdf0f6b1ea72109d90ce8045a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://54652046bde3b67d35e6c5f742e2890abdf8d6d2bd70b0b1177cb5e5ce1b8c76\",\"dweb:/ipfs/QmRq7r9F3sWwG8TsXETbSCLbs5PKfzqZQzP5kiUWGVHD8D\"]},\"contracts/erc3643/registry/interface/IIdentityRegistry.sol\":{\"keccak256\":\"0x87d69fbbc00a557aeddbee2ff223f08587f985259e9b32cf457751b745bb4daa\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://351ac974e5a6147969d311ee7463f3389374e8bb9dbe4fd9d5d69c6c8b3335c4\",\"dweb:/ipfs/Qmcvn6Uh4tVmEdkGiubVV2DdDeaf5wjRqvTQJvMrhbsv5q\"]},\"contracts/erc3643/registry/interface/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0xcb8963165583f3c481cc8892db91eeb0747235442564b53642550fd85eb8eb53\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6511f488da510e77328deed472caa34dd4079727ee21f44dbfff3714d8e60ce4\",\"dweb:/ipfs/QmcfsaezSMYczaRVTyNHbwdbHv5fATLtFvHWeBZGL4xdro\"]},\"contracts/erc3643/registry/interface/ITrustedIssuersRegistry.sol\":{\"keccak256\":\"0x5781477ff23d1cde0de244a2159e76bdc37ef62ec4ffb92c7a1ce2b6b5007bde\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://4b4feefbd2ff2f4a987c109d8a67b224ab1e5d8257c813cc28c9a035f993499f\",\"dweb:/ipfs/QmPWynRBRNeZn2trVxHirGGogFFxHVpjvuac1bygs7FURN\"]},\"contracts/onchainid/interface/IClaimIssuer.sol\":{\"keccak256\":\"0x92e375808930842a1d68eaccebd9bc217ccb95991491c91fb138d1d4bc16388a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://815938c289ffa9426073a10a9748103f50ba4174ffb760505fecbd3159e8d2a5\",\"dweb:/ipfs/QmQw6e1vDL31kZPFHeuW7NVym2NCd1oUbw6QarbpWW9j32\"]},\"contracts/onchainid/interface/IERC734.sol\":{\"keccak256\":\"0x67bbcf9b182b7f30e869e65b6d82cb9b2df9881635b74e99cf3c132639032f9f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://7c59d814dd394340507ab2a3393f5a904fc8e11c44998685c1810a47116d17aa\",\"dweb:/ipfs/QmdVhP6yMj9Mmd54nAKZxkafFvdMiZjEWW57r57oBrp7Ds\"]},\"contracts/onchainid/interface/IERC735.sol\":{\"keccak256\":\"0x074374c0cdcb706606f1c2082037c8d8cac77e416bdc3aaaabb2b09bafd3f18e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://68b5e2df5bfaf4b76f285ae2b2fa5608ef13b373c470416273f0c99fa17f34b6\",\"dweb:/ipfs/QmTqikGhLTkzjGj3KsFCvneeDhPKTCgfwAFv7QBjj9cGuB\"]},\"contracts/onchainid/interface/IIdentity.sol\":{\"keccak256\":\"0xe1feb936b7ee377a7874c46899cc2db24b77f40b8f48cbeadb8b2b1a6fbc5db0\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://cbd4f4708dea22981418a5221f7dd45be25dbb2a56d4e14c9c726170d081abd5\",\"dweb:/ipfs/QmUj4gTdijqYc4ndLg2xhxCZxb7weey5uiQDev8tRpFjum\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"claimTopicsRegistry","type":"address","indexed":true}],"type":"event","name":"ClaimTopicsRegistrySet","anonymous":false},{"inputs":[{"internalType":"address","name":"investorAddress","type":"address","indexed":true},{"internalType":"uint16","name":"country","type":"uint16","indexed":true}],"type":"event","name":"CountryUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"investorAddress","type":"address","indexed":true},{"internalType":"contract IIdentity","name":"identity","type":"address","indexed":true}],"type":"event","name":"IdentityRegistered","anonymous":false},{"inputs":[{"internalType":"address","name":"investorAddress","type":"address","indexed":true},{"internalType":"contract IIdentity","name":"identity","type":"address","indexed":true}],"type":"event","name":"IdentityRemoved","anonymous":false},{"inputs":[{"internalType":"address","name":"identityStorage","type":"address","indexed":true}],"type":"event","name":"IdentityStorageSet","anonymous":false},{"inputs":[{"internalType":"contract IIdentity","name":"oldIdentity","type":"address","indexed":true},{"internalType":"contract IIdentity","name":"newIdentity","type":"address","indexed":true}],"type":"event","name":"IdentityUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"trustedIssuersRegistry","type":"address","indexed":true}],"type":"event","name":"TrustedIssuersRegistrySet","anonymous":false},{"inputs":[{"internalType":"address[]","name":"_userAddresses","type":"address[]"},{"internalType":"contract IIdentity[]","name":"_identities","type":"address[]"},{"internalType":"uint16[]","name":"_countries","type":"uint16[]"}],"stateMutability":"nonpayable","type":"function","name":"batchRegisterIdentity"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"stateMutability":"view","type":"function","name":"contains","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"deleteIdentity"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"stateMutability":"view","type":"function","name":"identity","outputs":[{"internalType":"contract IIdentity","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"identityStorage","outputs":[{"internalType":"contract IIdentityRegistryStorage","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"stateMutability":"view","type":"function","name":"investorCountry","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"stateMutability":"view","type":"function","name":"isVerified","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"issuersRegistry","outputs":[{"internalType":"contract ITrustedIssuersRegistry","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"contract IIdentity","name":"_identity","type":"address"},{"internalType":"uint16","name":"_country","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"registerIdentity"},{"inputs":[{"internalType":"address","name":"_claimTopicsRegistry","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setClaimTopicsRegistry"},{"inputs":[{"internalType":"address","name":"_identityRegistryStorage","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setIdentityRegistryStorage"},{"inputs":[{"internalType":"address","name":"_trustedIssuersRegistry","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setTrustedIssuersRegistry"},{"inputs":[],"stateMutability":"view","type":"function","name":"topicsRegistry","outputs":[{"internalType":"contract IClaimTopicsRegistry","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"uint16","name":"_country","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"updateCountry"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"contract IIdentity","name":"_identity","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateIdentity"}],"devdoc":{"kind":"dev","methods":{"batchRegisterIdentity(address[],address[],uint16[])":{"details":"function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION","params":{"_countries":"The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events","_identities":"The addresses of the corresponding identity contracts","_userAddresses":"The addresses of the users"}},"contains(address)":{"details":"This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.","params":{"_userAddress":"The address of the user to be checked."},"returns":{"_0":"'True' if the address is contained in the Identity Registry, 'false' if not."}},"deleteIdentity(address)":{"details":"Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract","params":{"_userAddress":"The address of the user to be removed  emits `IdentityRemoved` event"}},"identity(address)":{"details":"Returns the onchainID of an investor.","params":{"_userAddress":"The wallet of the investor"}},"identityStorage()":{"details":"Returns the IdentityRegistryStorage linked to the current IdentityRegistry."},"investorCountry(address)":{"details":"Returns the country code of an investor.","params":{"_userAddress":"The wallet of the investor"}},"isVerified(address)":{"details":"This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from trusted issuers registry and from the claim topics registry","params":{"_userAddress":"The address of the user to be verified."},"returns":{"_0":"'True' if the address is verified, 'false' if not."}},"issuersRegistry()":{"details":"Returns the TrustedIssuersRegistry linked to the current IdentityRegistry."},"registerIdentity(address,address,uint16)":{"details":"Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract","params":{"_country":"The country of the investor  emits `IdentityRegistered` event","_identity":"The address of the user's identity contract","_userAddress":"The address of the user"}},"setClaimTopicsRegistry(address)":{"details":"Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract","params":{"_claimTopicsRegistry":"The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event"}},"setIdentityRegistryStorage(address)":{"details":"Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract","params":{"_identityRegistryStorage":"The address of the new Identity Registry Storage  emits `IdentityStorageSet` event"}},"setTrustedIssuersRegistry(address)":{"details":"Replace the actual trustedIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract","params":{"_trustedIssuersRegistry":"The address of the new Trusted Issuers Registry  emits `TrustedIssuersRegistrySet` event"}},"topicsRegistry()":{"details":"Returns the ClaimTopicsRegistry linked to the current IdentityRegistry."},"updateCountry(address,uint16)":{"details":"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract","params":{"_country":"The new country of the user  emits `CountryUpdated` event","_userAddress":"The address of the user"}},"updateIdentity(address,address)":{"details":"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract","params":{"_identity":"The address of the user's new identity contract  emits `IdentityUpdated` event","_userAddress":"The address of the user"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","@pythnetwork/=node_modules/@pythnetwork/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/erc3643/registry/interface/IIdentityRegistry.sol":"IIdentityRegistry"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/erc3643/registry/interface/IClaimTopicsRegistry.sol":{"keccak256":"0xc34dc3406974c37153a0bd2eaea0f75feac7bdfbdf0f6b1ea72109d90ce8045a","urls":["bzz-raw://54652046bde3b67d35e6c5f742e2890abdf8d6d2bd70b0b1177cb5e5ce1b8c76","dweb:/ipfs/QmRq7r9F3sWwG8TsXETbSCLbs5PKfzqZQzP5kiUWGVHD8D"],"license":"GPL-3.0"},"contracts/erc3643/registry/interface/IIdentityRegistry.sol":{"keccak256":"0x87d69fbbc00a557aeddbee2ff223f08587f985259e9b32cf457751b745bb4daa","urls":["bzz-raw://351ac974e5a6147969d311ee7463f3389374e8bb9dbe4fd9d5d69c6c8b3335c4","dweb:/ipfs/Qmcvn6Uh4tVmEdkGiubVV2DdDeaf5wjRqvTQJvMrhbsv5q"],"license":"GPL-3.0"},"contracts/erc3643/registry/interface/IIdentityRegistryStorage.sol":{"keccak256":"0xcb8963165583f3c481cc8892db91eeb0747235442564b53642550fd85eb8eb53","urls":["bzz-raw://6511f488da510e77328deed472caa34dd4079727ee21f44dbfff3714d8e60ce4","dweb:/ipfs/QmcfsaezSMYczaRVTyNHbwdbHv5fATLtFvHWeBZGL4xdro"],"license":"GPL-3.0"},"contracts/erc3643/registry/interface/ITrustedIssuersRegistry.sol":{"keccak256":"0x5781477ff23d1cde0de244a2159e76bdc37ef62ec4ffb92c7a1ce2b6b5007bde","urls":["bzz-raw://4b4feefbd2ff2f4a987c109d8a67b224ab1e5d8257c813cc28c9a035f993499f","dweb:/ipfs/QmPWynRBRNeZn2trVxHirGGogFFxHVpjvuac1bygs7FURN"],"license":"GPL-3.0"},"contracts/onchainid/interface/IClaimIssuer.sol":{"keccak256":"0x92e375808930842a1d68eaccebd9bc217ccb95991491c91fb138d1d4bc16388a","urls":["bzz-raw://815938c289ffa9426073a10a9748103f50ba4174ffb760505fecbd3159e8d2a5","dweb:/ipfs/QmQw6e1vDL31kZPFHeuW7NVym2NCd1oUbw6QarbpWW9j32"],"license":"GPL-3.0"},"contracts/onchainid/interface/IERC734.sol":{"keccak256":"0x67bbcf9b182b7f30e869e65b6d82cb9b2df9881635b74e99cf3c132639032f9f","urls":["bzz-raw://7c59d814dd394340507ab2a3393f5a904fc8e11c44998685c1810a47116d17aa","dweb:/ipfs/QmdVhP6yMj9Mmd54nAKZxkafFvdMiZjEWW57r57oBrp7Ds"],"license":"GPL-3.0"},"contracts/onchainid/interface/IERC735.sol":{"keccak256":"0x074374c0cdcb706606f1c2082037c8d8cac77e416bdc3aaaabb2b09bafd3f18e","urls":["bzz-raw://68b5e2df5bfaf4b76f285ae2b2fa5608ef13b373c470416273f0c99fa17f34b6","dweb:/ipfs/QmTqikGhLTkzjGj3KsFCvneeDhPKTCgfwAFv7QBjj9cGuB"],"license":"GPL-3.0"},"contracts/onchainid/interface/IIdentity.sol":{"keccak256":"0xe1feb936b7ee377a7874c46899cc2db24b77f40b8f48cbeadb8b2b1a6fbc5db0","urls":["bzz-raw://cbd4f4708dea22981418a5221f7dd45be25dbb2a56d4e14c9c726170d081abd5","dweb:/ipfs/QmUj4gTdijqYc4ndLg2xhxCZxb7weey5uiQDev8tRpFjum"],"license":"GPL-3.0"}},"version":1},"id":80}